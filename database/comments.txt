	// Добавление заголовка ответа
	
	w.Header().Add("Vary", "Origin")
    w.Header().Add("Vary", "Access-Control-Request-Method")
    w.Header().Add("Vary", "Access-Control-Request-Headers")
	w.Header().Add("Access-Control-Allow-Origin", "*")
	w.Header().Add("Access-Control-Allow-Methods", "GET,POST,PATCH,OPTIONS")
	w.Header().Add("Access-Control-Allow-Headers", "Content-Type,x-auth-token")

	// При GET запросе аргументы считываются так:

	var login = r.FormValue("login")
	login = r.URL.Query().Get("login");

	// Заголовки считываются так:

	token   = r.Header.Get("x-auth-token")

	// Заголовки добавляются так:

	req.Header.Add(tc.requestHeaderName, tc.requestHeaderValue)

/////////////////////////////////////////////////////////////
// Старая функция, которая уже не нужна в проекте
// Сохраняю чтобы не забыть как делать SELECT из известного списка uid

func (conn *ConnDB) GetLoggedUsers(uid []int) ([]common.User, error) {
	var users = []common.User{}
	var user common.User
	var birth string
	var interests string
	if len(uid) == 0 {
		return users, nil
	}
	query := "SELECT * FROM users WHERE uid IN ("
	length := len(uid)
	for i := 1; i <= length; i++ {
		query += "$" + strconv.Itoa(i) + ", "
	}
	tmp := []byte(query)
	tmp = tmp[:len(tmp)-2]
	query = string(tmp) + ")"
	stmt, err := conn.db.Prepare(query)
	if err != nil {
		return users, errors.New(err.Error() + " in preparing")
	}
	interfaceSlice := make([]interface{}, len(uid))
	for i, val := range uid {
		interfaceSlice[i] = val
	}
	rows, err := stmt.Query(interfaceSlice...)
	for rows.Next() {
		err = rows.Scan(&(user.Uid), &(user.Mail), &(user.EncryptedPass), &(user.Fname),
		&(user.Lname), &birth, &(user.Gender), &(user.Orientation),
		&(user.Bio), &(user.AvaID), &user.Latitude, &user.Longitude, &interests,
		&(user.Status), &(user.Rating))
		if err != nil {
			return nil, err
		}
		// handle user Interests
		if len(interests) > 2 {
			strArr := strings.Split(string(interests[1:len(interests)-1]), ",")
			for _, strItem := range strArr {
				user.Interests = append(user.Interests, strItem)
			}
		}
		// handle user birth and age
		if len(birth) > 10 {
			birth = string(birth[:10])
			date, err := time.Parse("2006-01-02", birth)
			user.Birth.Time = &date//common.CustomDate(date)
			if err != nil {
				return nil, err
			}
			user.Age = int(time.Since(*user.Birth.Time).Hours() / 24 / 365.27)
		}
		users = append(users, user)
	}
	return users, nil
}

